package connect4;

import util.Point;

public class GameLogic {
	int columns = 7;
	int rows = 6;

	private int[][] gameGrid = new int[columns][rows];

	//aloituspiste, y-yläasennossa, jotta mahtuu liikkumaan aloituspisteeseen (moottorin oltava ylä-asennossa)
	private Point currentLocation = new Point(0, 5); 

	private boolean isRobotsTurn = false; // Player's turn by default
	private boolean gameBoardReadComplete = false;

	private boolean turnCalculationReceived = false;
	private boolean hasDroppedPiece = false;
	private Point calculatedMovePoint = null;
	
	public boolean getIsRobotsTurn() {
		return isRobotsTurn;
	}
	
	public void setIsRobotsTurn(boolean b) {
		isRobotsTurn = b;
	}
	
	public boolean inStartPosition() {
		if(currentLocation.x<0)
			return true;
		return false;
	}
	
	public void setCalculatedMove(Point point) {
		calculatedMovePoint = point;
	}
	
	public Point getCalculatedMove() {
		int x = calculatedMovePoint.x - currentLocation.x;
		int y = calculatedMovePoint.y - currentLocation.y;
		return new Point(x,y);
	}
	
	public boolean getGameBoardReadComplete() {
		return gameBoardReadComplete;
	}
	
	public void setGameBoardReadComplete(boolean completed) {
		gameBoardReadComplete = completed;
	}

	public GameLogic() {
		gameGrid = new int[columns][rows];
	}
	
	public void setLocation(Point point) {
		currentLocation = point;
	}
	
	public void locationChange(Point point) {
		currentLocation.x += point.x;
		currentLocation.y += point.y;
	}
	
	public Point getLocation() {
		return currentLocation;
	}
	
	public void setPieceToCurrentLocation(int color) {
		gameGrid[currentLocation.x][currentLocation.y]=color;
	}

	// etsii seuraavan tyhj�n slotin nykyisest� sijainnista eteenp�in. l�hdett�v�
	// t�ss� vaiheessa nollasta, eli nollaus ennen t�t�. palautetaan ensimmäinen löydetty tyhjä
	private Point checkNextEmptySlot() {
		Point nextEmptyPoint = null;
		for (int i = currentLocation.x+1; i < columns; i++) {
			for (int j = 0; j < rows; j++) {
				if (gameGrid[i][j] == 0) {
					nextEmptyPoint = new Point(i, j);
					System.out.println("Next empty slot: " + nextEmptyPoint);
					return nextEmptyPoint;
				}
			}
		}
		return nextEmptyPoint;
	}
	
	//"askeleet" seuraavaan tarkistettavaan pisteeseen anturin nykyisest� sijainnista
	public Point stepsToNextEmpty() {
		Point nextEmpty = checkNextEmptySlot();
		Point xySteps = new Point();
		
		xySteps.x = nextEmpty.x-currentLocation.x;
		xySteps.y = nextEmpty.y-currentLocation.y;
		System.out.println("Steps to next empty slot: " + xySteps);
		
		return xySteps;
	}


}
