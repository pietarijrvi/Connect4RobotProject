package connect4;
import java.util.ArrayList;

import behaviors.DispenseGamePieces;
import behaviors.DriveForward;
import behaviors.EmergencyStop;
import behaviors.ReadGamePieces;
import behaviors.ReturnToStart;
import lejos.hardware.Button;
import lejos.hardware.Device;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.port.Port;
import lejos.hardware.port.MotorPort;
import lejos.robotics.subsumption.Arbitrator;
import lejos.robotics.subsumption.Behavior;
import lejos.utility.Delay;
import sensors.ColorTester;
import sensors.TouchSensor;
public class RobotProgram {
	
	public static void main(String[] args) {
		Arbitrator arbitrator;
		ArrayList<Behavior> behaviors = new ArrayList<>();

		// Gets the sensors and motors from the ports
		Port colorPort = LocalEV3.get().getPort("S1");
		Port feederEndPort = LocalEV3.get().getPort("S2");
		Port startPositionButtonPort = LocalEV3.get().getPort("S4");
		Port motorMovementPort = MotorPort.D;
		Port motorColorSensorPort = MotorPort.B;
		Port motorPieceFeederPort = MotorPort.A;


		// Initializes the needed classes
		ColorTester colorCalibrator = new ColorTester(colorPort);
		GameLogic gameLogic = new GameLogic();
		MotorFunctions motorFunctions = new MotorFunctions(motorMovementPort, motorPieceFeederPort, motorColorSensorPort);
		PieceXYReadMove pieceXYReadMove = new PieceXYReadMove(motorFunctions,gameLogic,colorCalibrator);
		TouchSensor startPositionButton = new TouchSensor(startPositionButtonPort);
		TouchSensor feederEndButton = new TouchSensor(feederEndPort);
		
		// Testing if motors are connected to the ports. Loops if one or both of the
		// motors are not detected.
		boolean motorPortTest = false;
		while (!motorPortTest) {
			System.out.println("Testing motor ports");
			if (motorFunctions.testMotorPorts()) {
				System.out.println("\nMotor port test ok\n");
				motorPortTest = true;
			} else {
				System.out.println("Check connection of motors");
				Delay.msDelay(2000);
			}
		}
		//DriveForward driveForward = new DriveForward(motorFunctions);
		ReadGamePieces readGamePieces = new ReadGamePieces(pieceXYReadMove,gameLogic);
		EmergencyStop emergencyStop = new EmergencyStop();
		ReturnToStart returnToStart = new ReturnToStart(motorFunctions, startPositionButton, gameLogic);
		DispenseGamePieces dispenseGamePieces = new DispenseGamePieces(pieceXYReadMove, motorFunctions, feederEndButton, gameLogic, colorCalibrator);

		// Adds the behaviors in the order of importance from least to most
		//behaviors.add(driveForward);
		behaviors.add(readGamePieces);
		behaviors.add(returnToStart);
		
		//behaviors.add(emergencyStop);
		//behaviors.add(dispenseGamePieces);

		Behavior[] behaviorArray = behaviors.toArray(new Behavior[behaviors.size()]);

		arbitrator = new Arbitrator(behaviorArray);

		// Starting sequence
		colorCalibrator.startCalibration();
		System.out.println("Please test the emergency stop button. (Down)");
		Button.DOWN.waitForPressAndRelease();
		System.out.println("yep, it works");
		System.out.println("Press ENTER to start");
		Button.ENTER.waitForPressAndRelease();
		// Starts the bot's default cycle
		System.out.println("Arbitrator soon!");
		arbitrator.go();

		((Device) colorPort).close();
		((Device) motorMovementPort).close();
		((Device) motorColorSensorPort).close();
		((Device) motorPieceFeederPort).close();
	}
}
